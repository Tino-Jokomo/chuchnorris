{"version":3,"sources":["giphy.gif","GraphQL/Queries.js","Components/GetJoke.js","GraphQL/QueryAnimals.js","Components/GetAnimals.js","GraphQL/QueryCareers.js","Components/GetCareers.js","GraphQL/QueryCelebs.js","Components/GetCelebs.js","GraphQL/QueryDevs.js","Components/GetDevs.js","GraphQL/QueryExplicit.js","Components/GetExplicit.js","GraphQL/QueryFashion.js","Components/GetFashion.js","GraphQL/QueryFood.js","Components/GetFood.js","GraphQL/QueryMoney.js","Components/GetMoney.js","GraphQL/QueryMovie.js","Components/GetMovie.js","GraphQL/QueryMusic.js","Components/GetMusic.js","GraphQL/QueryPolitics.js","Components/GetPolitics.js","GraphQL/QueryReligion.js","Components/GetReligion.js","GraphQL/QueryScience.js","Components/GetScience.js","GraphQL/QuerySport.js","Components/GetSport.js","GraphQL/QueryTravel.js","Components/GetTravel.js","GraphQL/QueryHistory.js","Components/GetHistory.js","Components/JokeDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["LOAD_JOKES","gql","GetJoke","useLazyQuery","loadJoke","called","loading","data","refetch","className","onClick","joke","LOAD_ANIMALS","GetAnimals","loadAnimals","animals","LOAD_CAREERS","GetCareers","loadCareers","careers","LOAD_CELEBS","GetCelebs","loadCelebs","celebs","LOAD_DEVS","GetDevs","loadDevs","devs","LOAD_EXPLICIT","GetExplicit","loadExplicit","explicit","LOAD_FASHION","GetFashion","loadFashion","fashion","LOAD_FOOD","GetFood","loadFood","food","LOAD_MONEY","GetMoney","loadMoney","money","LOAD_MOVIE","GetMovie","loadMovie","movie","LOAD_MUSIC","GetMusic","loadMusic","music","LOAD_POLITICS","GetPolitics","loadPolitics","politics","LOAD_RELIGION","GetReligion","loadReligion","religion","LOAD_SCIENCE","GetScience","loadScience","science","LOAD_SPORT","GetSport","loadSport","sport","LOAD_TRAVEL","GetTravel","loadTravel","travel","LOAD_HISTORY","GetHistory","loadHistory","history","JokeDisplay","Component","errorLink","onError","graphqlErrors","networkError","map","message","location","path","alert","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18abc6ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/giphy.2fd96194.gif\";","import {gql} from '@apollo/client';\n\nexport const LOAD_JOKES =gql `\nquery{\n    joke\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_JOKES} from '../GraphQL/Queries.js'\n\n\n\n\nfunction GetJoke(){     //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\nconst [loadJoke, {called,loading,data,refetch}] = useLazyQuery(LOAD_JOKES);\n  \n  \n    if (called && loading) return <p>Loading ...</p>\n   if (!called){\n    return <button className=\"joke_button\" onClick={() => loadJoke()}>Random Joke</button>\n}\n   //<button onClick={() => loadJoke()}>Random Joke</button>\n   const{joke} = data; \n    return (\n        <div className=\"categories\">\n        <button className=\"joke_button\" onClick={() => refetch()}>Random Joke</button>\n        <h1 className=\"joke\">\n           {joke}\n        </h1>\n        </div>\n    );\n        \n        \n        \n\n\n}\n\nexport default GetJoke;","import {gql} from '@apollo/client';\n\nexport const LOAD_ANIMALS =gql `\nquery{\n    animals\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_ANIMALS} from '../GraphQL/QueryAnimals.js'\n\n\n\n\nfunction GetAnimals(){      //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadAnimals, {called,loading,data,refetch}] = useLazyQuery(LOAD_ANIMALS);\n\n    if (called && loading) return <p>Loading ...</p>\n   if (!called){\n    return <button className=\"joke_button\" onClick={() => loadAnimals()}>Animals</button>\n}\n        const{animals} = data;\n       \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Animals</button>\n            <h1 className=\"joke\">\n               {animals}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetAnimals;","import {gql} from '@apollo/client';\n\nexport const LOAD_CAREERS =gql `\nquery{\n    careers\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_CAREERS} from '../GraphQL/QueryCareers.js'\n\n\n\n\nfunction GetCareers(){      //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadCareers, {called,loading,data,refetch}] = useLazyQuery(LOAD_CAREERS);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadCareers()}>Careers</button>\n }\n        const{careers} = data;\n       \n        return (\n            <div className=\"categories\">\n            <button  className=\"joke_button\"onClick={() => refetch()}>Careers</button>\n            <h1 className=\"joke\">\n               {careers}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetCareers;","import {gql} from '@apollo/client';\n\nexport const LOAD_CELEBS =gql `\nquery{\n    celebs\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_CELEBS} from '../GraphQL/QueryCelebs.js'\n\n\n\n\nfunction GetCelebs(){       //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\nconst [loadCelebs, {called,loading,data,refetch}] = useLazyQuery(LOAD_CELEBS);\n\nif (called && loading) return <p>Loading ...</p>\nif (!called){\n return <button className=\"joke_button\" onClick={() => loadCelebs()}>Celebrity</button>\n}\n        const{celebs} = data;\n        \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Celebrity</button>\n            <h1 className=\"joke\">\n               {celebs}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetCelebs;","import {gql} from '@apollo/client';\n\nexport const LOAD_DEVS =gql `\nquery{\n    devs\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_DEVS} from '../GraphQL/QueryDevs.js'\n\n\n\n\nfunction GetDevs(){     //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadDevs, {called,loading,data,refetch}] = useLazyQuery(LOAD_DEVS);\n\n    if (called && loading) return <p>Loading ...</p>\nif (!called){\n return <button className=\"joke_button\" onClick={() => loadDevs()}>Dev Jokes</button>\n}\n        const{devs} = data;\n       \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Dev Jokes</button>\n            <h1 className=\"joke\">\n               {devs}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetDevs;","import {gql} from '@apollo/client';\n\nexport const LOAD_EXPLICIT =gql `\nquery{\n    explicit\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_EXPLICIT} from '../GraphQL/QueryExplicit.js'\n\n\n\n\nfunction GetExplicit(){     //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadExplicit, {called,loading,data,refetch}] = useLazyQuery(LOAD_EXPLICIT);\n\n    if (called && loading) return <p>Loading ...</p>\nif (!called){\n return <button className=\"joke_button\" onClick={() => loadExplicit()}>Explicit</button>\n}\n        const{explicit} = data;\n  \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Explicit</button>\n            <h1 className=\"joke\">\n               {explicit}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetExplicit;","import {gql} from '@apollo/client';\n\nexport const LOAD_FASHION =gql `\nquery{\n    fashion\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_FASHION} from '../GraphQL/QueryFashion.js'\n\n\n\n\nfunction GetFashion(){      //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadFashion, {called,loading,data,refetch}] = useLazyQuery(LOAD_FASHION);\n\n    if (called && loading) return <p>Loading ...</p>\nif (!called){\n return <button className=\"joke_button\" onClick={() => loadFashion()}>Fashion</button>\n}\n        const{fashion} = data;\n     \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Fashion</button>\n            <h1 className=\"joke\">\n               {fashion}\n            </h1>\n            </div>\n        );\n\n\n}\n\nexport default GetFashion;","import {gql} from '@apollo/client';\n\nexport const LOAD_FOOD =gql `\nquery{\n    food\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_FOOD} from '../GraphQL/QueryFood.js'\n\n\n\n\nfunction GetFood(){ //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadFood, {called,loading,data,refetch}] = useLazyQuery(LOAD_FOOD);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadFood()}>Food</button>\n    }\n        const{food} = data;\n       \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Food</button>\n            <h1 className=\"joke\">\n               {food}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetFood;","import {gql} from '@apollo/client';\n\nexport const LOAD_MONEY =gql `\nquery{\n    money\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_MONEY} from '../GraphQL/QueryMoney.js'\n\n\n\n\nfunction GetMoney(){\n\n    const [loadMoney, {called,loading,data,refetch}] = useLazyQuery(LOAD_MONEY);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadMoney()}>Money</button>\n    }\n        const{money} = data;\n     \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Money</button>\n            <h1 className=\"joke\">\n               {money}\n            </h1>\n            </div>\n        );\n\n\n}\n\nexport default GetMoney;","import {gql} from '@apollo/client';\n\nexport const LOAD_MOVIE =gql `\nquery{\n    movie\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_MOVIE} from '../GraphQL/QueryMovie.js'\n\n\n\n\nfunction GetMovie(){\n\n    const [loadMovie, {called,loading,data,refetch}] = useLazyQuery(LOAD_MOVIE);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadMovie()}>Movie</button>\n    }\n        const{movie} = data;\n       \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Movie</button>\n            <h1 className=\"joke\">\n               {movie}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetMovie;","import {gql} from '@apollo/client';\n\nexport const LOAD_MUSIC =gql `\nquery{\n    music\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_MUSIC} from '../GraphQL/QueryMusic.js'\n\n\n\n\nfunction GetMusic(){        //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadMusic, {called,loading,data,refetch}] = useLazyQuery(LOAD_MUSIC);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadMusic()}>Music</button>\n    }\n        const{music} = data;\n    \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Music</button>\n            <h1 className=\"joke\">\n               {music}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetMusic;","import {gql} from '@apollo/client';\n\nexport const LOAD_POLITICS =gql `\nquery{\n    politics\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_POLITICS} from '../GraphQL/QueryPolitics.js'\n\n\n\n\nfunction GetPolitics(){ //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadPolitics, {called,loading,data,refetch}] = useLazyQuery(LOAD_POLITICS);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadPolitics()}>Politics</button>\n    }\n        const{politics} = data;\n       \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Politics</button>\n            <h1 className=\"joke\">\n               {politics}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetPolitics;","import {gql} from '@apollo/client';\n\nexport const LOAD_RELIGION =gql `\nquery{\n    religion\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_RELIGION} from '../GraphQL/QueryReligion.js'\n\n\n\n\nfunction GetReligion(){ //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadReligion, {called,loading,data,refetch}] = useLazyQuery(LOAD_RELIGION);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadReligion()}>Religion</button>\n    }\n        const{religion} = data;\n       \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Religion</button>\n            <h1 className=\"joke\">\n               {religion}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetReligion;","import {gql} from '@apollo/client';\n\nexport const LOAD_SCIENCE =gql `\nquery{\n    science\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_SCIENCE} from '../GraphQL/QueryScience.js'\n\n\n\n\nfunction GetScience(){  //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadScience, {called,loading,data,refetch}] = useLazyQuery(LOAD_SCIENCE);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadScience()}>Science</button>\n    }\n        const{science} = data;\n     \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Science</button>\n            <h1 className=\"joke\">\n               {science}\n            </h1>\n            </div>\n        );\n\n\n}\n\nexport default GetScience;","import {gql} from '@apollo/client';\n\nexport const LOAD_SPORT =gql `\nquery{\n    sport\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_SPORT} from '../GraphQL/QuerySport.js'\n\n\n\n\nfunction GetSport(){    //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadSport, {called,loading,data,refetch}] = useLazyQuery(LOAD_SPORT);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadSport()}>Sport</button>\n    }\n        const{sport} = data;\n     \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Sport</button>\n            <h1 className=\"joke\">\n               {sport}\n            </h1>\n            </div>\n        );\n\n\n}\n\nexport default GetSport;","import {gql} from '@apollo/client';\n\nexport const LOAD_TRAVEL =gql `\nquery{\n    travel\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_TRAVEL} from '../GraphQL/QueryTravel.js'\n\n\n\n\nfunction GetTravel(){   //Get's relevant joke for category and displays a button that queries for that Joke upon request\n\n    const [loadTravel, {called,loading,data,refetch}] = useLazyQuery(LOAD_TRAVEL);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadTravel()}>Travel</button>\n    }\n        const{travel} = data;\n       \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>Travel</button>\n            <h1 className=\"joke\">\n               {travel}\n            </h1>\n            </div>\n        );\n\n\n}\n\nexport default GetTravel;","import {gql} from '@apollo/client';\n\nexport const LOAD_HISTORY =gql `\nquery{\n    history\n}\n`;","import React,{useEffect,useState} from \"react\";\nimport {useQuery,gql,Query,useLazyQuery} from \"@apollo/client\";\nimport {LOAD_HISTORY} from '../GraphQL/QueryHistory.js'\n\n\n\n\nfunction GetHistory(){\n\n    const [loadHistory, {called,loading,data,refetch}] = useLazyQuery(LOAD_HISTORY);\n\n    if (called && loading) return <p>Loading ...</p>\n    if (!called){\n     return <button className=\"joke_button\" onClick={() => loadHistory()}>History</button>\n    }\n        const{history} = data;\n    \n        return (\n            <div className=\"categories\">\n            <button className=\"joke_button\" onClick={() => refetch()}>History</button>\n            <h1 className=\"joke\">\n               {history}\n            </h1>\n            </div>\n           \n        );\n\n\n}\n\nexport default GetHistory;","import React, {Component} from 'react';\nimport {setState} from \"react\";\nimport GetJoke from './GetJoke';\nimport GetAnimals from './GetAnimals';\nimport GetCareers from './GetCareers';\nimport GetCelebs from './GetCelebs';\nimport GetDevs from './GetDevs';\nimport GetExplicit from './GetExplicit';\nimport GetFashion from './GetFashion';\nimport GetFood from './GetFood';\nimport GetMoney from './GetMoney';\nimport GetMovie from './GetMovie';\nimport GetMusic from './GetMusic';\nimport GetPolitics from './GetPolitics';\nimport GetReligion from './GetReligion';\nimport GetScience from './GetScience';\nimport GetSport from './GetSport';\nimport GetTravel from './GetTravel';\nimport GetHistory from './GetHistory';\n\nclass JokeDisplay extends Component{\n\n    render(){\n        return(\n            <div className=\"categories\">\n                <GetJoke/>\n                <GetAnimals/>\n             <GetCareers/>\n             <GetCelebs/>\n             <GetDevs/>\n             <GetExplicit/>\n             <GetFashion/>\n             <GetFood/>\n             <GetHistory/>\n             <GetMoney/>\n             <GetMovie/>\n             <GetMusic/>\n             <GetPolitics/>\n             <GetReligion/>\n             <GetScience/>\n             <GetSport/>\n             <GetTravel/>\n            </div>\n        )\n    }\n\n}\nexport default JokeDisplay","\nimport logo from './giphy.gif';\nimport React from 'react';\nimport './App.css';\nimport JokeDisplay from './Components/JokeDisplay.js'\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    HttpLink,\n    from,\n} from \"@apollo/client\";\nimport {ErrorLink, onError} from '@apollo/client/link/error';\n\nconst errorLink = onError(({graphqlErrors,networkError}) => {\n    if (graphqlErrors){\n        graphqlErrors.map(({message,location,path}) =>{\n            alert('Graphql error $(message)');\n        });\n    }\n});\n<link rel=\"stylesheet\" href=\"/Users/tinojokomo/Documents/dev-work/React Projects/chucknorris/src/index.css\"></link>\n\nconst link= from([\n    errorLink,\n    new HttpLink({\n        uri: \"localhost:9000/graphql\"\n    })\n])\n\nconst client =new ApolloClient ({\n    cache:new InMemoryCache(),\n    link:link\n})\n\n\n\n\n    \n    \n\n\nfunction App() {\n\n    return <ApolloProvider client={client}>\n        < div className = \"main\" > \n        <div className = \"top_wrapper\" > \n        <h1 className=\"headings\"> Welcome to the Chuck Norris Joke Fan Page </h1>\n        <img src = {logo} alt=\"\" className=\"App-logo\"></img> \n     </div>\n     <div className=\"body_jokes\"><p className=\"headings\">What Type of Joke would you like to see today ?</p>\n     <p className=\"click\">Re-click Category To See A New Joke :)</p>\n     <div className=\"joke_wrapper\">\n         <div className=\"joke_categories\">\n         <JokeDisplay/>\n         </div>\n         \n     </div>\n     </div>\n\n\n     </div>\n     </ApolloProvider> ;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}